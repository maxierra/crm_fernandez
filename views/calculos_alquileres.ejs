<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cálculos de Alquileres</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f9fa;
        }

        h1 {
            color: #343a40;
        }

        #status {
            font-size: 1.25rem;
            color: #6c757d;
        }

        .table {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .table thead th {
            background-color: #18bc9c;
            color: #fff;
            border: none;
        }

        .table tbody td {
            border-top: 1px solid #dee2e6;
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

        .contract-container {
            margin-bottom: 2rem;
        }

        .contract-container h2 {
            color: #343a40;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <%- include('navbar') %>

    <div class="container mt-4">
        <h1 class="text-center mb-4">Cálculos de Alquileres</h1>
        <div id="status" class="mb-3"></div>
        <div id="datos"></div>
    </div>
   
    <script>
        const statusElement = document.getElementById('status');
        const datosElement = document.getElementById('datos');
        
        statusElement.textContent = 'Cargando datos...';
        
        fetch('/api/calculos-alquileres')
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw err; });
                }
                return response.json();
            })
            .then(data => {
                statusElement.textContent = 'Datos cargados con éxito';
        
                // Limpiar el contenedor de datos
                datosElement.innerHTML = '';
        
                // Función para mapear valores
                const tipoIncrementoMap = {
                    1: 'Mensual',
                    2: 'Anual',
                    3: 'Otro'
                };
        
                // Agrupar datos por contrato_id
                const groupedData = data.reduce((acc, item) => {
                    if (!acc[item.contrato_id]) {
                        acc[item.contrato_id] = [];
                    }
                    acc[item.contrato_id].push(item);
                    return acc;
                }, {});
        
                // Función para ordenar los periodos numéricamente
                function ordenarPorPeriodo(a, b) {
                    const numeroPeriodoA = parseInt(a.periodo.match(/\d+/)[0]);
                    const numeroPeriodoB = parseInt(b.periodo.match(/\d+/)[0]);
                    return numeroPeriodoA - numeroPeriodoB;
                }
        
                // Crear una tabla para cada contrato_id
                Object.keys(groupedData).forEach(contrato_id => {
                    // Ordenar los datos por el número en 'periodo'
                    groupedData[contrato_id].sort(ordenarPorPeriodo);
        
                    const contractTable = document.createElement('table');
                    contractTable.className = 'table table-bordered table-striped mb-4';
        
                    // Crear encabezado de la tabla
                    const thead = document.createElement('thead');
                    thead.innerHTML = `
                        <tr>
                            <th>ID</th>
                            <th>Tipo Incremento</th>
                            <th>Propietario</th>
                            <th>Inquilino</th>
                            <th>Periodo</th>
                            <th>Inicio del Periodo</th>
                            <th>Fin del Periodo</th>
                            <th>Importe del Periodo</th>
                            <th>ICL Inicio</th>
                            <th>ICL Fin</th>
                        </tr>
                    `;
                    contractTable.appendChild(thead);
        
                    // Crear cuerpo de la tabla
                    const tbody = document.createElement('tbody');
                    groupedData[contrato_id].forEach(contrato => {
                        const row = document.createElement('tr');
        
                        // Mapear los valores
                        const tipoIncremento = tipoIncrementoMap[contrato.tipo_incremento] || contrato.tipo_incremento;
        
                        // Agregar celdas a la fila
                        const cells = [
                            contrato.id,
                            tipoIncremento,
                            contrato.propietario,
                            contrato.inquilino,
                            contrato.periodo,
                            contrato.periodo_inicio,
                            contrato.periodo_fin,
                            contrato.importe_periodo,
                            contrato.icl_inicio,
                            contrato.icl_fin
                        ];
        
                        cells.forEach((value, index) => {
                            const cell = document.createElement('td');
                            if (index === 7) { // 7 es el índice de "Importe del Periodo"
                                const input = document.createElement('input');
                                input.type = 'number';
                                input.value = value;
                                input.className = 'form-control';
                                input.dataset.id = contrato.id;
                                input.dataset.periodo = contrato.periodo;
                                input.dataset.contratoId = contrato.contrato_id;
                                input.addEventListener('change', actualizarImporte);
                                cell.appendChild(input);
                            } else {
                                cell.textContent = value;
                            }
                            row.appendChild(cell);
                        });
        
                        tbody.appendChild(row);
                    });
                    contractTable.appendChild(tbody);
        
                    // Agregar la tabla al contenedor de datos
                    const contractContainer = document.createElement('div');
                    contractContainer.className = 'contract-container';
                    contractContainer.innerHTML = `<h2>Contrato ID: ${contrato_id}</h2>`;
                    contractContainer.appendChild(contractTable);
        
                    datosElement.appendChild(contractContainer);
                });
            })
            .catch(error => {
                console.error('Error:', error);
                statusElement.textContent = 'Error al cargar los datos';
            });
        
        function actualizarImporte(event) {
            const input = event.target;
            const nuevoImporte = parseFloat(input.value);
            const contratoId = input.dataset.contratoId;
            const periodo = input.dataset.periodo;
        
            // Añadir clase para indicar que está cargando
            input.classList.add('updating');
        
            fetch('/api/actualizar-importe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contratoId,
                    periodo,
                    nuevoImporte
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Importe actualizado con éxito');
                    // Actualizar el valor por defecto para futuras comparaciones
                    input.defaultValue = nuevoImporte;
                    // Mostrar un mensaje de éxito
                    mostrarMensaje(input, 'Importe actualizado correctamente', 'success');
                } else {
                    console.error('Error al actualizar el importe');
                    // Revertir el valor en caso de error
                    input.value = input.defaultValue;
                    // Mostrar un mensaje de error
                    mostrarMensaje(input, 'Error al actualizar el importe', 'error');
                }
            })
            .catch((error) => {
                console.error('Error:', error);
                // Revertir el valor en caso de error
                input.value = input.defaultValue;
                // Mostrar un mensaje de error
                mostrarMensaje(input, 'Error de conexión', 'error');
            })
            .finally(() => {
                // Remover clase de carga
                input.classList.remove('updating');
            });
        }
        
        function mostrarMensaje(input, mensaje, tipo) {
            const mensajeElement = document.createElement('div');
            mensajeElement.textContent = mensaje;
            mensajeElement.className = `alert alert-${tipo === 'success' ? 'success' : 'danger'} mt-2`;
            
            // Insertar el mensaje después del input
            input.parentNode.insertAdjacentElement('afterend', mensajeElement);
        
            // Remover el mensaje después de 3 segundos
            setTimeout(() => {
                mensajeElement.remove();
            }, 3000);
        }
        
        // Añadir estilos para la animación de carga
        const style = document.createElement('style');
        style.textContent = `
            .updating {
                opacity: 0.5;
                pointer-events: none;
            }
        `;
        document.head.appendChild(style);
           
    </script>
    

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
